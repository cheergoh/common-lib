package showfree.commoncore.db;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import showfree.commoncore.db.orm.ResultSetConvert;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.List;

public final class DBTransactionSession {
	
	private Connection conn = null;

	protected DBTransactionSession(Connection conn) {
		this.conn = conn;
	}
	
	public JSONArray query(String sql, ResultRowFilter<JSONObject> rowFilter) throws Exception {
		return query(sql, rowFilter, false);
	}
	
	public JSONArray query(String sql, ResultRowFilter<JSONObject> rowFilter, boolean toHumpName) throws Exception {
		Statement stmt = null;
		try {
			stmt = conn.createStatement();
			return ResultSetConvert.toJSONArray(stmt.executeQuery(sql), null, rowFilter, toHumpName);
		}finally {
			try {
				stmt.close();
			}catch(Exception ex) {}
		}
	}
	
	public List query(String sql, Class cls, ResultRowFilter<Object> rowFilter) throws Exception {
		Statement stmt = null;
		try {
			stmt = conn.createStatement();
			return ResultSetConvert.toObject(stmt.executeQuery(sql), cls, null, rowFilter);
		}finally {
			try {
				stmt.close();
			}catch(Exception ex) {}
		}
	}
	
	public JSONObject queryFirst(String sql) throws Exception {
		return queryFirst(sql, false);
	}
	
	public JSONObject queryFirst(String sql, boolean toHumpName) throws Exception {
		Statement stmt = null;
		try {
			stmt = conn.createStatement();
			JSONArray rows = ResultSetConvert.toJSONArray(stmt.executeQuery(sql), 1, null, toHumpName);
			return rows.size() > 0 ? rows.getJSONObject(0) : null;
		}finally {
			try {
				stmt.close();
			}catch(Exception ex) {}
		}
	}
	
	public Object queryFirst(String sql, Class cls) throws Exception {
		Statement stmt = null;
		try {
			stmt = conn.createStatement();
			List rows = ResultSetConvert.toObject(stmt.executeQuery(sql), cls, 1, null);
			return rows.size() > 0 ? rows.get(0) : null;
		}finally {
			try {
				stmt.close();
			}catch(Exception ex) {}
		}
	}
	
	public void execute(String sql) throws Exception {
		Statement stmt = null;
		try {
			stmt = conn.createStatement();
			stmt.execute(sql);
		}finally {
			try {
				stmt.close();
			}catch(Exception ex) {}
		}
	}
	
	public void execute(String[] sqls) throws Exception {
		if(sqls != null && sqls.length > 0) {
			Statement stmt = null;
			try {
				stmt = conn.createStatement();
				for(String sql : sqls) {
					stmt.execute(sql);
				}
			}finally {
				try {
					stmt.close();
				}catch(Exception ex) {}
			}
		}
	}
	
	public void execute(List<String> sqlList) throws Exception {
		if(sqlList != null && !sqlList.isEmpty()) {
			Statement stmt = null;
			try {
				stmt = conn.createStatement();
				for(String sql : sqlList) {
					stmt.execute(sql);
				}
			}finally {
				try {
					stmt.close();
				}catch(Exception ex) {}
			}
		}
	}
	
	public void executeBatch(String[] sqls) throws Exception {
		if(sqls != null && sqls.length > 0) {
			Statement stmt = null;
			try {
				stmt = conn.createStatement();
				for(String sql : sqls) {
					stmt.addBatch(sql);
				}
				stmt.executeBatch();
			}finally {
				try {
					stmt.close();
				}catch(Exception ex) {}
			}
		}
	}
	
	public void executeBatch(List<String> sqlList) throws Exception {
		if(sqlList != null && !sqlList.isEmpty()) {
			Statement stmt = null;
			try {
				stmt = conn.createStatement();
				for(String sql : sqlList) {
					stmt.addBatch(sql);
				}
				stmt.executeBatch();
			}finally {
				try {
					stmt.close();
				}catch(Exception ex) {}
			}
		}
	}
	
	public int insertIntAutoGeneratedKey(String sql) throws Exception {
		Statement stmt = null;
		try {
			stmt = conn.createStatement();
			stmt.execute(sql, Statement.RETURN_GENERATED_KEYS);
			ResultSet rs = stmt.getGeneratedKeys();
			rs.next();
			return rs.getInt(1);
		}finally {
			try {
				stmt.close();
			}catch(Exception ex) {}
		}
	}
	
	public long insertLongAutoGeneratedKey(String sql) throws Exception {
		Statement stmt = null;
		try {
			stmt = conn.createStatement();
			stmt.execute(sql, Statement.RETURN_GENERATED_KEYS);
			ResultSet rs = stmt.getGeneratedKeys();
			rs.next();
			return rs.getLong(1);
		}finally {
			try {
				stmt.close();
			}catch(Exception ex) {}
		}
	}
}
